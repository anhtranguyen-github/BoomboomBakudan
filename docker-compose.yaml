version: "3.6"

services:
  # Redpanda service
  coincap-redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.11
    container_name: coincap-redpanda
    command:
      - redpanda
      - start
      - --smp
      - "1"
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - "1"
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://coincap-redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr
      - PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
      - --advertise-pandaproxy-addr
      - PLAINTEXT://coincap-redpanda:28082,OUTSIDE://localhost:8082
      - --rpc-addr
      - 0.0.0.0:33145
      - --advertise-rpc-addr
      - coincap-redpanda:33145
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 9644:9644
      - 28082:28082
      - 29092:29092
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  # Redpanda Console for UI
  coincap-redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.4.6
    container_name: coincap-redpanda-console
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["coincap-redpanda:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://coincap-redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://coincap-redpanda:9644"]
        connect:
          enabled: false
    ports:
      - 1003:8080
    depends_on:
      coincap-redpanda:
        condition: service_healthy

  # CoincapProducer service
  coincap-producer:
    build:
      context: ./CoincapProducer
      dockerfile: Dockerfile
    container_name: coincap-producer
    environment:
      REDPANDA_BROKERS: "coincap-redpanda:29092"
      ASSET_PRICES_TOPIC: "data.asset_prices"
    depends_on:
      coincap-redpanda:
        condition: service_healthy

  # CoincapConsumer service
  coincap-consumer:
    build:
      context: ./CoincapConsumer
      dockerfile: Dockerfile
    container_name: coincap-consumer
    ports:
      - 9090:8080
      - 7014:7077
      - 4010:4040
    environment:
      SPARK_MASTER: "local[*]"
      REDPANDA_BROKERS: "coincap-redpanda:29092"
      ASSET_PRICES_TOPIC: "data.asset_prices"
      ASSET_SCHEMA_LOCATION: "/src/schemas/assets.avsc"
      ASSET_CASSANDRA_HOST: "coincap-cassandra"
      ASSET_CASSANDRA_PORT: 9042
      ASSET_CASSANDRA_USERNAME: "adminadmin"
      ASSET_CASSANDRA_PASSWORD: "adminadmin"
      ASSET_CASSANDRA_KEYSPACE: 'assets'
      ASSET_CASSANDRA_TABLE: 'assets'
    depends_on:
      coincap-redpanda:
        condition: service_healthy
      coincap-cassandra:
        condition: service_healthy
      coincap-cassandra-init:
        condition: service_completed_successfully

  coincap-consumer-worker-1:
    build:
      context: ./CoincapConsumer
      dockerfile: SparkWorker.DockerFile
    container_name: coincap-consumer-worker-1
    ports:
      - 8041:8081
    depends_on:
      - coincap-consumer
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://coincap-consumer:7077

  coincap-consumer-worker-2:
    build:
      context: ./CoincapConsumer
      dockerfile: SparkWorker.DockerFile
    container_name: coincap-consumer-worker-2
    ports:
      - 8042:8081
    depends_on:
      - coincap-consumer
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://coincap-consumer:7077

  # Cassandra service
  coincap-cassandra:
    image: cassandra:4.1.3
    container_name: coincap-cassandra
    ports:
      - 9042:9042
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cassandra initialization service
  coincap-cassandra-init:
    image: cassandra:4.1.3
    container_name: coincap-cassandra-init
    depends_on:
      coincap-cassandra:
        condition: service_healthy
    volumes:
      - ./init-cassandra.sh:/init-cassandra.sh
    command: ["/init-cassandra.sh"]
